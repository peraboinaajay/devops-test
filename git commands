In git ,local rpositry it contains two stages staging,local repository

  To add the file to the staging area
     # git add <file name>
  To check the working tree status
     # git status
To commiting changes to local repository after complited of git add
  # git commit


TRACKING CHANGES:
To displayed all the changes made to the tracked files
   # git diff

STAGING AND COMMITING MULTIPLE FILES:
To commit the changes in staging area it contains many files then use the flag -a to commit all the files
  # git commit -a -m "message"

Removing the files from local repository:
To remove a file from local repository as well as system 
   # git rm <filename>
To remove the file from git local repository but not from system 
   # git rm --cached <filename>
To remove a file from staging area by using -f flag
  # git rm -f <filename>

Ignoring files:
if a file not git to track than create a file 
 # .gitignore
in that you should be mention the files
Alternatively you can also download the .gitignore file from github


logs
 To show the commit id and its message
   # git log

To add remote repository to local user git add
  # git add remote origin <remote link> 
  # git remote add origin <remote link>
To push local repository to remote repository 
 # git push origin master

set up a username for your repository
  # git config --global user.name "username"
Set up user-email for your repository
  # git config --global user.email "usermail"

Select or create the directory whereyou want to initialize git
initialize git in the directory 
 # git init
 git amend:
git amend can be used to make changes to last commit message
 # git commit --amend
commit tags provide an alias for commit id 
  # git tag --a <annotation> --m <massege>
To view all tags 
  # git tag
Adding a tag to one of the previous commits
 # git tag --a <annotation><commit id> --m <message>
commit id can be viewed in git logs
all these tags can be viewed in git 
  # git show <tagname>



REMOTE
To add remote repository to local use git add remote followed by remote link
  # git add remote origin <remotename>
To push local repository to remote repository
  # git push origin master
Tags can be pushed ,viewed and shared on remote
  # git push origin -- tags

To list all the remotes attached to your local repository
  # git remote -v

Fetch command copies the changes from remote to the local repository 
  # git fetch origin 
fetch does not affect the pressent working directory

Pull copies all the changes from remote to the local repository
It then merges the changes with the present working directory
  # git pull origin



             BRANCHING AND MERGING

To create a new branch from your current branch
  # git branch <branchname>
You can switch to your new branch 
  # git switch <branchname>
   (or)  # git checkout <branvh name>
branch command lists all the branches and also points to the current working branch
   #  git branch
different modified branches can be merged together using mege
  # git merge <branchname>
The branch mentioned is merged into the current branch
Merged branches can be deleted using the -d flag
  # git branch -d <branch name>
Unmerged branches can be deleted using the -D flag
  # git branch -D <branch name>

         MERGE CONFLICT

merge conflict arises on merging branches
Set a default merge tool before resolving cnflict
  # git config --global merge.tool <toolname>
Merge tool automatically detects the conflicts and displays them
  # git mergetool
commit the resolved changes 
merge the branch again


       STASHING, REBASING, REVERTING AND RESETTING

To create a stash of your current working directory
   # git stash save "message"
To list all the saved stashes
  # git stash list
stash list uses a stack structure to save the list
saved stashes can be applied at any time on any branch
  # git stash apply <stash id>
after applying a stash it can still be  accessed else where because it remain in the stash
Pop command can be used to apply the most recent stash and removing it from the stash stack
  # git stash pop 
stashes can be deleted from the stash list
  # git stash drop <stashid>
The entair stash stack can be deleted using one command
    # git stash clear

       REBASING

To rebase a branch 
   # git rebase <rebase branch>
Rever or undo the changes made in the previous commit
  # git revert <commit id>
old commit still resides in the history

       RESET

Reset command can be use to undo changes at different levels
Modifiers like
   -- hard, --soft and --mixed can be used to decide the degree to which to reset
 # git reset <modifier> <commitid>
